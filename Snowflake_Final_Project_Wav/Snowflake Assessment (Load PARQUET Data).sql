-------------------------------------------------- Snowflake Assessment (Load PARQUET Data) --------------------------------------------------
-- CREATE TABLE TO LOAD PARQUET DATA 

CREATE OR REPLACE TABLE PRACTICEDB.AVINASH_SCHEMA.INVENTORY_PARQUET ( 
    	ID NUMBER(38,0),PRODUCT_NAME VARCHAR(1000),QTY_AVAILABLE NUMBER(3,0));

-- CREATE FILE FORMAT TO INFORM SNOWFLAKE THAT WHICH FORMAT OF THE FILE TO EXPECT  
CREATE OR REPLACE FILE FORMAT PRACTICEDB.AVINASH_SCHEMA.INVENTORY_PARQUET_FORMAT 
TYPE = PARQUET;

-- CREATE STAGE OBJECT TO LET SNOWFLAKE KNOW FROM WHERE TO PICK THE FILES 
CREATE OR REPLACE STAGE PRACTICEDB.AVINASH_SCHEMA.INVENTORY_PARQUET_STAGE 
STORAGE_INTEGRATION = S3_INT 
URL = 's3://wav-training/snowflake/Inventory.parquet' 
FILE_FORMAT = INVENTORY_PARQUET_FORMAT;

-- TAKE A LOOK AT THE DATA PRIOR TO LOADING INTO THE TABLES 
SELECT * FROM @PRACTICEDB.AVINASH_SCHEMA.INVENTORY_PARQUET_STAGE;


-- USE COPY COMMAND TO INGEST DATA FROM AWS 

COPY INTO PRACTICEDB.AVINASH_SCHEMA.INVENTORY_PARQUET 
FROM (select $1:"_COL_0"::number as ID, 
              $1:"_COL_1"::text AS PRODUCT_NAME, 
              $1:"_COL_2"::number AS QTY_AVAILABLE
      FROM @PRACTICEDB.AVINASH_SCHEMA.INVENTORY_PARQUET_STAGE
);

-- QUERY TO FETCH DATA DIRECTLY FROM STAGE AREA WITH FILTERS 

SELECT * FROM PRACTICEDB.AVINASH_SCHEMA.INVENTORY_PARQUET
WHERE ID < 5;

SELECT * FROM @PRACTICEDB.AVINASH_SCHEMA.INVENTORY_PARQUET_STAGE
WHERE $1:"_COL_0" < 5;

select $1:"_COL_0"::number as ID, 
              $1:"_COL_1"::text AS PRODUCT_NAME, 
              $1:"_COL_2"::number AS QTY_AVAILABLE
      FROM @PRACTICEDB.AVINASH_SCHEMA.INVENTORY_PARQUET_STAGE where id < 5;


select * from INVENTORY_PARQUET;

-- CREATE A STREAM FOR THE TABLE PRACTICEDB.SCHEMANAME. INVENTORY_PARQUET 
create or replace stream AVINSTREAM on table PRACTICEDB.AVINASH_SCHEMA.INVENTORY_PARQUET;

SHOW STREAMS;

select * from INVENTORY_PARQUET;

/* MAKING CHANGES IN "INVENTORY_PARQUET" */

-- update PRACTICEDB.AVINASH_SCHEMA.INVENTORY_PARQUET set product_name = 'Lays Onion Special' where id = 1;
insert into PRACTICEDB.AVINASH_SCHEMA.INVENTORY_PARQUET(id,product_name,qty_available) values (21,'Bingo',10),(22,'Heart Chips',0);

update PRACTICEDB.AVINASH_SCHEMA.INVENTORY_PARQUET set QTY_AVAILABLE = 22 where product_name = 'Bingo';

delete from PRACTICEDB.AVINASH_SCHEMA.INVENTORY_PARQUET where product_name = 'Bingo';

SELECT * FROM INVENTORY_PARQUET;

/* -------------------------------------------- MAKING CHANGES IN "INVENTORY_PARQUET" -------------------------------------------- */
-- CHECK ON STREAM
select * from AVINSTREAM;

-- CREATE A TASK TO STORE ONLY THE INSERT ENTRIES IN STREAM AND SCHEDULE IT TO RUN FOR EVERY 1 hour
/*
CREATE TASK Task1 
  WAREHOUSE = Load_WH 
  SCHEDULE = '60 minute' 
WHEN 
  SYSTEM$STREAM_HAS_DATA('AVINSTREAM') 
AS 
  INSERT INTO INVENTORY_PARQUET(id,product_name) SELECT id,product_name FROM AVINSTREAM WHERE METADATA$ACTION = 'INSERT'; */
  
desc table INVENTORY_PARQUET;


---Create another table
CREATE OR REPLACE TABLE PRACTICEDB.AVINASH_SCHEMA.TEMP_INVENTORY_PARQUET (
ID NUMBER(38,0),
PRODUCT_NAME VARCHAR(1000),
QTY_AVAILABLE NUMBER(3,0)
);

CREATE OR REPLACE TASK Task1
  WAREHOUSE = Load_WH 
  SCHEDULE = '5 MINUTE'
WHEN 
  SYSTEM$STREAM_HAS_DATA('AVINSTREAM') 
AS 
  INSERT INTO TEMP_INVENTORY_PARQUET(id,product_name,qty_available) SELECT id,product_name,qty_available FROM AVINSTREAM WHERE METADATA$ACTION = 'INSERT';
  
  -- execute task Task1;
execute task Task1;
--check to see if any changes are pending
select system$stream_has_data('AVINSTREAM');

--Turning on a task is done with a RESUME command
alter task PRACTICEDB.AVINASH_SCHEMA.Task1 resume; -- alter task Task1 resume;
alter task PRACTICEDB.AVINASH_SCHEMA.Task1 suspend;

describe task PRACTICEDB.AVINASH_SCHEMA.Task1;

select * from INVENTORY_PARQUET;

select * from TEMP_INVENTORY_PARQUET;
